################################################################################
#
# init-rootfs-rotate
#
################################################################################

INIT_ROOTFS_ROTATE_VERSION = 1
INIT_ROOTFS_ROTATE_SITE = $(BR2_EXTERNAL_SVEYRET_PATH)/package/init-rootfs-rotate/source
INIT_ROOTFS_ROTATE_SITE_METHOD = local
INIT_ROOTFS_ROTATE_LICENSE = GPL-3.0
INIT_ROOTFS_ROTATE_DEPENDENCIES = host-fakeroot busybox

# We will actually (re-)compile busybox with minimum tools for the initramfs
INIT_ROOTFS_ROTATE_WORKDIR = $(@D)/.init_rootfs_rotate
INIT_ROOTFS_ROTATE_BUSYBOX_DIR = $(INIT_ROOTFS_ROTATE_WORKDIR)/busybox
INIT_ROOTFS_ROTATE_FINAL_TARGET = $(INIT_ROOTFS_ROTATE_WORKDIR)/output
INIT_ROOTFS_ROTATE_FAKEROOT_SCRIPT = $(INIT_ROOTFS_ROTATE_WORKDIR)/fakeroot
INIT_ROOTFS_ROTATE_INITRAMFS ?= $(INIT_ROOTFS_ROTATE_WORKDIR)/initramfs.cpio

INIT_ROOTFS_ROTATE_MAKE_ENV = \
	$(TARGET_MAKE_ENV) \
	CFLAGS="$(TARGET_CFLAGS)" \
	CFLAGS_busybox=""

INIT_ROOTFS_ROTATE_MAKE_OPTS = \
	HOSTCC="$(HOSTCC_NOCCACHE)" \
	CC="$(TARGET_CC)" \
	ARCH=$(KERNEL_ARCH) \
	PREFIX="$(INIT_ROOTFS_ROTATE_FINAL_TARGET)" \
	EXTRA_LDFLAGS="$(TARGET_LDFLAGS)" \
	CROSS_COMPILE="$(TARGET_CROSS)" \
	CONFIG_PREFIX="$(INIT_ROOTFS_ROTATE_FINAL_TARGET)" \
	SKIP_STRIP=y

ifeq ($(BR2_REPRODUCIBLE),y)
define INIT_ROOTFS_ROTATE_REPRODUCIBLE
	find $(INIT_ROOTFS_ROTATE_FINAL_TARGET) -print0 | xargs -0 -r touch -hd @$(SOURCE_DATE_EPOCH)
endef
endif

define INIT_ROOTFS_ROTATE_KERNEL_PREPARE_CMDS
	mkdir -p "$(INIT_ROOTFS_ROTATE_WORKDIR)"
	cp -r $(BUSYBOX_DIR) $(INIT_ROOTFS_ROTATE_BUSYBOX_DIR)
	$(INIT_ROOTFS_ROTATE_MAKE_ENV) $(MAKE) $(INIT_ROOTFS_ROTATE_MAKE_OPTS) -C $(INIT_ROOTFS_ROTATE_BUSYBOX_DIR) mrproper
	cp $(INIT_ROOTFS_ROTATE_DIR)/busybox.config $(INIT_ROOTFS_ROTATE_BUSYBOX_DIR)/.config
	$(INIT_ROOTFS_ROTATE_MAKE_ENV) $(MAKE) $(INIT_ROOTFS_ROTATE_MAKE_OPTS) -C $(INIT_ROOTFS_ROTATE_BUSYBOX_DIR)
	mkdir -p $(INIT_ROOTFS_ROTATE_FINAL_TARGET)/{bin,dev,etc,mnt/{saved,base,root},proc,root,sbin,sys}
	ln -s /bin/busybox $(INIT_ROOTFS_ROTATE_FINAL_TARGET)/bin/mount
	ln -s /bin/busybox $(INIT_ROOTFS_ROTATE_FINAL_TARGET)/sbin/switch_root
	$(INIT_ROOTFS_ROTATE_MAKE_ENV) $(MAKE) $(INIT_ROOTFS_ROTATE_MAKE_OPTS) -C $(INIT_ROOTFS_ROTATE_BUSYBOX_DIR) install
	cp $(INIT_ROOTFS_ROTATE_DIR)/init $(INIT_ROOTFS_ROTATE_FINAL_TARGET)/
endef

define INIT_ROOTFS_ROTATE_KERNEL_BUILD_CMDS
	echo '#!/bin/sh' >"$(INIT_ROOTFS_ROTATE_FAKEROOT_SCRIPT)"
	echo "set -e" >>"$(INIT_ROOTFS_ROTATE_FAKEROOT_SCRIPT)"
	echo "chown -h -R 0:0 $(INIT_ROOTFS_ROTATE_FINAL_TARGET)" >>"$(INIT_ROOTFS_ROTATE_FAKEROOT_SCRIPT)"
	echo "mknod $(INIT_ROOTFS_ROTATE_FINAL_TARGET)/dev/console c 5 1" >>"$(INIT_ROOTFS_ROTATE_FAKEROOT_SCRIPT)"
	echo "mknod $(INIT_ROOTFS_ROTATE_FINAL_TARGET)/dev/null c 1 3" >>"$(INIT_ROOTFS_ROTATE_FAKEROOT_SCRIPT)"
	echo "mknod $(INIT_ROOTFS_ROTATE_FINAL_TARGET)/dev/tty c 5 0" >>"$(INIT_ROOTFS_ROTATE_FAKEROOT_SCRIPT)"
	echo "$(INIT_ROOTFS_ROTATE_REPRODUCIBLE)" >>"$(INIT_ROOTFS_ROTATE_FAKEROOT_SCRIPT)"
	echo "cd $(INIT_ROOTFS_ROTATE_FINAL_TARGET) && find . -print0 | cpio --null --create --verbose --format=newc >\"$(INIT_ROOTFS_ROTATE_INITRAMFS)\"" >>"$(INIT_ROOTFS_ROTATE_FAKEROOT_SCRIPT)"
	chmod a+x "$(INIT_ROOTFS_ROTATE_FAKEROOT_SCRIPT)"
	PATH=$(BR_PATH) FAKEROOTDONTTRYCHOWN=1 $(HOST_DIR)/bin/fakeroot -- "$(INIT_ROOTFS_ROTATE_FAKEROOT_SCRIPT)"
endef

$(eval $(generic-package))
